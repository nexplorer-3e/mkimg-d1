name: revyos-kernel-build

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  # TODO: add timestamp on output bin files
  xuetie_toolchain: https://occ-oss-prod.oss-cn-hangzhou.aliyuncs.com/resource//1663142514282
  toolchain_file_name: Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.6.1-20220906.tar.gz
  ARCH: riscv

jobs:
  kernel:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: thead-gcc
            toolchain_tripe: riscv64-unknown-linux-gnu-
          - name: gcc-12
            toolchain_tripe: riscv64-linux-gnu-

    runs-on: ubuntu-22.04
    env:
      CROSS_COMPILE: ${{ matrix.toolchain_tripe }}

    steps:
      - name: Install software
        run: |
              sudo apt update && \
              sudo apt install -y gdisk dosfstools g++-12-riscv64-linux-gnu build-essential autoconf automake autotools-dev ninja-build make \
                                  libncurses-dev gawk flex bison openssl libssl-dev tree \
                                  dkms libelf-dev libudev-dev libpci-dev libiberty-dev device-tree-compiler \
                                  qemu-user-static binfmt-support mmdebstrap
              sudo update-alternatives --install \
                  /usr/bin/riscv64-linux-gnu-gcc riscv64-gcc /usr/bin/riscv64-linux-gnu-gcc-12 10
              sudo update-alternatives --install \
                  /usr/bin/riscv64-linux-gnu-g++ riscv64-g++ /usr/bin/riscv64-linux-gnu-g++-12 10
              wget https://mirror.iscas.ac.cn/revyos/revyos-addons/pool/main/r/revyos-keyring/revyos-keyring_2023.06.12_all.deb
                  sudo apt install ./revyos-keyring_2023.06.12_all.deb

      - name: Checkout kernel
        uses: actions/checkout@v3
        with:
            repository: 'revyos/d1-kernel'
            ref: 'd1/vector-support'
            path: 'kernel'
            depth: 1

      - name: Hash branch status
        run: |
          git -C kernel log -1 |tee refs.log

      - name: Skip if branch has compiled
        id: cache
        uses: actions/cache/restore@v3
        with:
          path: kernel-${{ matrix.name }}.tar.gz
          key: ${{ hashFiles('refs.log') }}
            
      - name: Configure toolchains
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
              mkdir rootfs && mkdir rootfs/boot
              wget ${xuetie_toolchain}/${toolchain_file_name}
              tar -xvf ${toolchain_file_name} -C /opt

      - name: Compile Kernel && Install
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
              export PATH="/opt/Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.6.1/bin:$PATH"

              pushd kernel
                # TODO: confirm config for target board

                # TODO: move custom kernel config to new defconfig
                echo 'CONFIG_WIRELESS=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_CFG80211=m' >> arch/riscv/configs/nezha_defconfig
                # enable /proc/config.gz
                echo 'CONFIG_IKCONFIG=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_IKCONFIG_PROC=y' >> arch/riscv/configs/nezha_defconfig
                # enable USB-LAN support
                echo 'CONFIG_USB_NET_DRIVERS=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_CATC=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_KAWETH=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_PEGASUS=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_RTL8150=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_RTL8152=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_LAN78XX=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_USBNET=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_AX8817X=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_AX88179_178A=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_CDCETHER=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_CDC_EEM=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_CDC_NCM=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_HUAWEI_CDC_NCM=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_CDC_MBIM=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_DM9601=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_SR9700=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_SR9800=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_SMSC75XX=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_SMSC95XX=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_GL620A=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_NET1080=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_PLUSB=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_MCS7830=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_RNDIS_HOST=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_CDC_SUBSET_ENABLE=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_CDC_SUBSET=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_ALI_M5632=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_AN2720=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_BELKIN=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_ARMLINUX=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_EPSON2888=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_KC2190=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_ZAURUS=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_CX82310_ETH=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_KALMIA=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_QMI_WWAN=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_INT51X1=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_IPHETH=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_SIERRA_NET=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_VL600=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_CH9200=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_NET_AQC111=m' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_USB_RTL8153_ECM=m' >> arch/riscv/configs/nezha_defconfig
                # enable systemV IPC (needed by fakeroot during makepkg)
                echo 'CONFIG_SYSVIPC=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_SYSVIPC_SYSCTL=y' >> arch/riscv/configs/nezha_defconfig
                # enable swap
                echo 'CONFIG_SWAP=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_ZSWAP=y' >> arch/riscv/configs/nezha_defconfig
                # enable Cedrus VPU Drivers
                echo 'CONFIG_MEDIA_SUPPORT=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_MEDIA_CONTROLLER=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_MEDIA_CONTROLLER_REQUEST_API=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_V4L_MEM2MEM_DRIVERS=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_VIDEO_SUNXI_CEDRUS=y' >> arch/riscv/configs/nezha_defconfig
                # enable binfmt_misc
                echo 'CONFIG_BINFMT_MISC=y' >> arch/riscv/configs/nezha_defconfig
                # enable EFI
                echo 'CONFIG_EFI=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_EFI_ZBOOT=y' >> arch/riscv/configs/nezha_defconfig
                # enable fat
                echo 'CONFIG_VFAT_FS=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_FAT_DEFAULT_IOCHARSET="iso8859-15"' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_FAT_DEFAULT_UTF8=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_EXFAT_FS=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_NLS_CODEPAGE_437=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_NLS_ISO8859_15=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_NLS_DEFAULT="utf8"' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_NLS_UTF8=y' >> arch/riscv/configs/nezha_defconfig
                # enable initramfs compression
                echo 'CONFIG_BLK_DEV_INITRD=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_INITRAMFS_SOURCE=""' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_RD_GZIP=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_RD_BZIP2=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_RD_LZMA=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_RD_XZ=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_RD_LZO=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_RD_LZ4=y' >> arch/riscv/configs/nezha_defconfig
                echo 'CONFIG_RD_ZSTD=y' >> arch/riscv/configs/nezha_defconfig

                make nezha_defconfig
                make -j$(nproc)
                make -j$(nproc) dtbs
                if [ x"$(cat .config | grep CONFIG_MODULES=y)" = x"CONFIG_MODULES=y" ]; then
                  sudo make INSTALL_MOD_PATH=${GITHUB_WORKSPACE}/rootfs/ modules_install -j$(nproc)
                fi
                # sudo make INSTALL_PATH=${GITHUB_WORKSPACE}/rootfs/boot zinstall -j$(nproc)

                # Install Kernel
                sudo make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} INSTALL_PATH=${GITHUB_WORKSPACE}/rootfs/boot install
                sudo make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} INSTALL_PATH=${GITHUB_WORKSPACE}/rootfs/boot dtbs_install
                sudo cp -v arch/riscv/boot/Image ${GITHUB_WORKSPACE}/rootfs/boot/

                # record commit-id
                git rev-parse HEAD > kernel-commitid
                sudo cp -v kernel-commitid ${GITHUB_WORKSPACE}/rootfs/boot/

                # Install DTB
                # sudo cp -v arch/riscv/boot/dts/allwinner/*.dtb ${GITHUB_WORKSPACE}/rootfs/boot/

                # Copy kernel deb packages
                make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} bindeb-pkg -j$(nproc)
                cp -v ../*.deb ${GITHUB_WORKSPACE}/rootfs/

                # Install RTL8723DS Driver
                git clone https://github.com/lwfinger/rtl8723ds.git
                pushd rtl8723ds
                    make ARCH=${ARCH} CROSS_COMPILE=${CROSS_COMPILE} KSRC=../ -j$(nproc) modules || true
                popd
                for kernel_version in $(ls ${GITHUB_WORKSPACE}/rootfs/lib/modules/);
                do
                    sudo install -D -p -m 644 "rtl8723ds/8723ds.ko" \
                        "${GITHUB_WORKSPACE}/rootfs/lib/modules/${kernel_version}/kernel/drivers/net/wireless/8723ds.ko"
                    depmod -a -b "${GITHUB_WORKSPACE}/rootfs" "${kernel_version}"
                    echo '8723ds' >> 8723ds.conf
                    sudo mkdir -p ${GITHUB_WORKSPACE}/rootfs/etc/modules-load.d/
                    sudo cp -v 8723ds.conf "${GITHUB_WORKSPACE}/rootfs/etc/modules-load.d/"
                done
              popd

      - name: compress
        if: steps.cache.outputs.cache-hit != 'true'
        run: tar -zcvf kernel-${{ matrix.name }}.tar.gz rootfs

      - uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: kernel-${{ matrix.name }}.tar.gz
          key: ${{ hashFiles('refs.log') }}

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: kernel-${{ matrix.name }}.tar.gz
          path: kernel-${{ matrix.name }}.tar.gz

  misc:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: devterm_r_01
            board_config: devterm_r_01_defconfig
          - name: dongshan_nezha_stu
            board_config: dongshan_nezha_stu_defconfig
          - name: lichee_rv_86_panel
            board_config: lichee_rv_86_panel_defconfig
          - name: lichee_rv_dock
            board_config: lichee_rv_dock_defconfig
          - name: mangopi_mq_pro
            board_config: mangopi_mq_pro_defconfig
          - name: nezha
            board_config: nezha_defconfig
    runs-on: ubuntu-22.04
    env:
      CROSS_COMPILE: riscv64-linux-gnu-
    steps:
      - name: Install software
        run: |
              sudo apt update && \
              sudo apt install -y gdisk dosfstools g++-12-riscv64-linux-gnu build-essential autoconf automake autotools-dev ninja-build make \
                                  libncurses-dev gawk flex bison openssl libssl-dev tree \
                                  dkms libelf-dev libudev-dev libpci-dev libiberty-dev device-tree-compiler \
                                  qemu-user-static binfmt-support mmdebstrap
              sudo update-alternatives --install \
                  /usr/bin/riscv64-linux-gnu-gcc riscv64-gcc /usr/bin/riscv64-linux-gnu-gcc-12 10
              sudo update-alternatives --install \
                  /usr/bin/riscv64-linux-gnu-g++ riscv64-g++ /usr/bin/riscv64-linux-gnu-g++-12 10

      - name: Checkout uboot
        uses: actions/checkout@v3
        with:
            repository: 'smaeul/u-boot'
            ref: 'd1-wip'
            path: 'uboot'
      
      - name: Checkout opensbi
        uses: actions/checkout@v3
        with:
            repository: 'riscv-software-src/opensbi'
            ref: 'master'
            path: 'opensbi'

      - name: Hash branch status
        run: |
          git -C uboot log -1 |tee refs.log
          git -C opensbi log -1 |tee -a refs.log

      - name: Skip if branch has compiled
        id: cache
        uses: actions/cache/restore@v3
        with:
          path: misc-${{ matrix.name }}.tar.gz
          key: ${{ hashFiles('refs.log') }}
       
      - name: Configure toolchains
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
              mkdir rootfs && mkdir rootfs/boot
              wget ${xuetie_toolchain}/${toolchain_file_name}
              tar -xvf ${toolchain_file_name} -C /opt

      - name: opensbi compile
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
            export PATH="/opt/Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.6.1/bin:$PATH"
      
            pushd opensbi
              PLATFORM=generic FW_PIC=y make
              sudo install -D -p -m 644 build/platform/generic/firmware/fw_dynamic.bin \
                  "${GITHUB_WORKSPACE}/rootfs/boot/"
            popd
            tree ${GITHUB_WORKSPACE}/rootfs

      - name: uboot compile
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
              export PATH="/opt/Xuantie-900-gcc-linux-5.10.4-glibc-x86_64-V2.6.1/bin:$PATH"

              pushd uboot
                make nezha_defconfig
                OPENSBI=${GITHUB_WORKSPACE}/rootfs/boot/fw_dynamic.bin make -j$(nproc)
                sudo install -D -p -m 644 u-boot-sunxi-with-spl.bin \
                  "${GITHUB_WORKSPACE}/rootfs/boot/u-boot-sunxi-with-spl.bin"
              popd
              tree ${GITHUB_WORKSPACE}/rootfs

      - name: Checkout qemu
        uses: actions/checkout@v3
        with:
          repository: revyos/qemu
          path: qemu
          ref: ab8f84892a89feea60f1bb24432ff58ce6d2885c  # TODO: remove this line

      - name: build qemu
        run: |
            pushd qemu
              ./configure \
                --prefix=$HOME/qemu-install \
                --static \
                --target-list=riscv64-linux-user \
                --disable-system \
                --disable-pie \
                --interp-prefix=/etc/qemu-binfmt/%M
              make -j$(nproc)
              make install

              sudo cp -fv $HOME/qemu-install/bin/qemu-riscv64 /usr/bin/qemu-riscv64-static
            popd
            ls -al /usr/bin/qemu-riscv64-static
            sudo dpkg-reconfigure binfmt-support
            
      - name: Checkout mkimg
        uses: actions/checkout@v3
        with:
            ref: 'ci'
            path: 'mkimg'

      - name: Make Image
        run: |
          pushd mkimg
            sudo ./mkimg.sh
            cp -v *.img ${GITHUB_WORKSPACE}/rootfs/
          popd

      - name: compress
        if: steps.cache.outputs.cache-hit != 'true'
        run: tar -zcvf ${{ matrix.name }}.tar.gz rootfs

      - uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ matrix.name }}.tar.gz
          key: ${{ hashFiles('refs.log') }}

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}.tar.gz
          path: ${{ matrix.name }}.tar.gz
            
  revyos-rootfs:
    runs-on: ubuntu-latest
    needs:
      - misc
      - kernel
    strategy:
      fail-fast: false
      matrix:
        name: [devterm_r_01, dongshan_nezha_stu, lichee_rv_86_panel, lichee_rv_dock, mangopi_mq_pro, nezha]
        kernel-toolchain-type: [gcc-12]
    steps:
      - uses: actions/checkout@v3

      - name: get kernel
        uses: actions/download-artifact@v3
        with:
          name: kernel-${{ matrix.kernel-toolchain-type }}.tar.gz

      - name: get uboot
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.name }}.tar.gz

      - name: build rootfs
        run: |
          sudo apt-get install -y qemu-user-static qemu-utils mmdebstrap
          sudo KEEP_ROOTFS=y bash mkimg.sh
          mv d1-sdcard-*.img d1.img
          qemu-img convert -f raw -O qcow2 d1.img d1.qcow2
          tar cJvf rootfs.tar.xz -C target/ .

      - name: upload tarball with boot stuff
        uses: actions/upload-artifact@v3
        with:
          path: rootfs.tar.xz
          name: rootfs-${{ matrix.name }}.tar.xz

      - name: upload qcow2
        uses: actions/upload-artifact@v3
        with:
          path: d1.qcow2
          name: d1-sdcard-${{ matrix.name }}.qcow2

      - name: upload raw image
        uses: actions/upload-artifact@v3
        with:
          path: d1.img
          name: d1-sdcard-${{ matrix.name }}.img
